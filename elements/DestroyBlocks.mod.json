{
  "_fv": 66,
  "_type": "procedure",
  "definition": {
    "procedurexml": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?><xml xmlns=\"https://developers.google.com/blockly/xml\"><block deletable=\"false\" type=\"event_trigger\" x=\"40\" y=\"40\"><field name=\"trigger\">no_ext_trigger</field><next><block type=\"controls_if\"><value name=\"IF0\"><block type=\"logic_entity_compare\"><field name=\"entity\">EntityLiving</field><value name=\"compareTo\"><block type=\"entity_from_deps\"/></value></block></value><statement name=\"DO0\"><block type=\"controls_if\"><value name=\"IF0\"><block type=\"math_binary_ops\"><field name=\"OP\">LTE</field><value name=\"A\"><block type=\"math_java_constants\"><field name=\"CONSTANT\">RANDOM</field></block></value><value name=\"B\"><block type=\"math_number\"><field name=\"NUM\">0.2</field></block></value></block></value><statement name=\"DO0\"><block type=\"controls_if\"><value name=\"IF0\"><block type=\"logic_entity_compare\"><field name=\"entity\">EntityLiving</field><value name=\"compareTo\"><block type=\"source_entity_from_deps\"/></value></block></value><statement name=\"DO0\"><block type=\"java_code\"><field name=\"CODE\">Vec3 currentPos = new Vec3(entity.getBlockX(), entity.getBlockY(), entity.getBlockZ());&amp;#10;\t\t\t\tLevel level = entity.level();&amp;#10;\t\t\t\tif (level == null)&amp;#10;\t\t\t\t\treturn; // Ensure the level is not null&amp;#10;\t\t\t\t// Set how far forward the particle should affect blocks&amp;#10;\t\t\t\tint forwardRange = 30; // Modify this value to increase or decrease the range&amp;#10;\t\t\t\tint widthRange = (int) (0.5 * (sourceentity.getCapability(JujutsucraftaddonModVariables.PLAYER_VARIABLES_CAPABILITY, null).orElse(new JujutsucraftaddonModVariables.PlayerVariables())).OutputLevel); // New variable to set the radius of the affected area&amp;#10;\t\t\t\tfor (int i = 0; i &lt; forwardRange; i++) {&amp;#10;\t\t\t\t\t// Calculate direction based on the source entity's rotation&amp;#10;\t\t\t\t\tdouble radians = Math.toRadians(sourceentity.getYRot() + 90);&amp;#10;\t\t\t\t\tdouble xOffset = Math.cos(radians) * i; // Cosine for the x direction&amp;#10;\t\t\t\t\tdouble zOffset = Math.sin(radians) * i; // Sine for the z direction&amp;#10;\t\t\t\t\tVec3 nextPos = currentPos.add(xOffset, 0, zOffset); // Calculated position&amp;#10;\t\t\t\t\t// Loop over the area around the current position&amp;#10;\t\t\t\t\tfor (int dx = -widthRange; dx &lt;= widthRange; dx++) { // Use 'dx' for the x offset&amp;#10;\t\t\t\t\t\tfor (int dz = -widthRange; dz &lt;= widthRange; dz++) { // Use 'dz' for the z offset&amp;#10;\t\t\t\t\t\t\tVec3 offsetPos = nextPos.add(dx, 0, dz);&amp;#10;\t\t\t\t\t\t\tfinal Vec3 _center = offsetPos;&amp;#10;\t\t\t\t\t\t\tList&lt;Entity&gt; _entfound = world.getEntitiesOfClass(Entity.class, new AABB(_center, _center).inflate(2.0d), e -&gt; true).stream().sorted(Comparator.comparingDouble(_entcnd -&gt; _entcnd.distanceToSqr(_center))).toList();&amp;#10;\t\t\t\t\t\t\tfor (Entity entityiterator : _entfound) {&amp;#10;\t\t\t\t\t\t\t\tif (sourceentity != entityiterator) {&amp;#10;\t\t\t\t\t\t\t\t\tentityiterator.hurt(new DamageSource(world.registryAccess().registryOrThrow(Registries.DAMAGE_TYPE).getHolderOrThrow(ResourceKey.create(Registries.DAMAGE_TYPE, new ResourceLocation(\"jujutsucraft:damage_curse\")))),&amp;#10;\t\t\t\t\t\t\t\t\t\t\t20);&amp;#10;\t\t\t\t\t\t\t\t}&amp;#10;\t\t\t\t\t\t\t}&amp;#10;\t\t\t\t\t\t\tBlockPos blockPos = new BlockPos((int) (offsetPos.x + 1), (int) offsetPos.y, (int) (offsetPos.z + 1));&amp;#10;\t\t\t\t\t\t\tBlockPos blockPos2 = new BlockPos((int) (offsetPos.x + Mth.nextInt(RandomSource.create(), -5, 5)), (int) offsetPos.y + Mth.nextInt(RandomSource.create(), -1, 1),&amp;#10;\t\t\t\t\t\t\t\t\t(int) (offsetPos.z + Mth.nextInt(RandomSource.create(), -5, 5)));&amp;#10;\t\t\t\t\t\t\t// Break blocks at the current and below positions&amp;#10;\t\t\t\t\t\t\tBlockState blockState = level.getBlockState(blockPos);&amp;#10;\t\t\t\t\t\t\tBlockState blockState2 = level.getBlockState(blockPos2);&amp;#10;\t\t\t\t\t\t\tBlock block = blockState.getBlock();&amp;#10;\t\t\t\t\t\t\tBlock block2 = blockState2.getBlock();&amp;#10;\t\t\t\t\t\t\tif (block != Blocks.BEDROCK) {&amp;#10;\t\t\t\t\t\t\t\tlevel.removeBlock(blockPos, false);&amp;#10;\t\t\t\t\t\t\t\tlevel.levelEvent(2001, blockPos, Block.getId(blockState)); // Block break event&amp;#10;\t\t\t\t\t\t\t}&amp;#10;\t\t\t\t\t\t\tif (block2 != Blocks.BEDROCK) {&amp;#10;\t\t\t\t\t\t\t\tlevel.removeBlock(blockPos2, false);&amp;#10;\t\t\t\t\t\t\t\tlevel.levelEvent(2001, blockPos2, Block.getId(blockState2)); // Block break event&amp;#10;\t\t\t\t\t\t\t}&amp;#10;\t\t\t\t\t\t\tBlockPos blockPosY1 = blockPos.below(1);&amp;#10;\t\t\t\t\t\t\tBlockState blockStateY1 = level.getBlockState(blockPosY1);&amp;#10;\t\t\t\t\t\t\tBlock block3 = blockStateY1.getBlock();&amp;#10;\t\t\t\t\t\t\tif (block3 != Blocks.BEDROCK) {&amp;#10;\t\t\t\t\t\t\t\tlevel.removeBlock(blockPosY1, false);&amp;#10;\t\t\t\t\t\t\t\tlevel.levelEvent(2001, blockPosY1, Block.getId(blockStateY1)); // Block break event&amp;#10;\t\t\t\t\t\t\t}&amp;#10;\t\t\t\t\t\t}&amp;#10;\t\t\t\t\t}&amp;#10;}</field><next><block type=\"java_code\"><field name=\"CODE\">sourceentity.getPersistentData().putDouble(\"Damage\", (double) (6 + Mth.nextInt(RandomSource.create(), 1, 10) * 3));&amp;#10;\t\t\t\t\tsourceentity.getPersistentData().putDouble(\"Range\", (double) (sourceentity.getBbWidth() + 10.0F));&amp;#10;\t\t\t\t\tsourceentity.getPersistentData().putDouble(\"effect\", 2.0);&amp;#10;\t\t\t\t\tsourceentity.getPersistentData().putDouble(\"knockback\", 0.25);&amp;#10;\t\t\t\t\tsourceentity.getPersistentData().putDouble(\"projectile_type\", 1.0);&amp;#10;\t\t\t\t\tsourceentity.getPersistentData().putBoolean(\"onlyRanged\", true);&amp;#10;\t\t\t\t\tRangeAttackProcedure.execute(world, sourceentity.getX(), sourceentity.getY() + (double) sourceentity.getBbHeight() * 0.5, sourceentity.getZ(), sourceentity);&amp;#10;\t\t\t\t\tsourceentity.getPersistentData().putBoolean(\"onlyRanged\", false);</field></block></next></block></statement></block></statement></block></statement><next><block type=\"explody_testy_varibles\"><next><block type=\"explodytesty\"><value name=\"X\"><block type=\"coord_x\"/></value><value name=\"Z\"><block type=\"coord_z\"/></value><value name=\"Y\"><block type=\"coord_y\"/></value><value name=\"radiusx\"><block type=\"math_number\"><field name=\"NUM\">0</field></block></value><value name=\"radiusz\"><block type=\"math_number\"><field name=\"NUM\">0</field></block></value><value name=\"heightD\"><block type=\"math_number\"><field name=\"NUM\">0</field></block></value><value name=\"explosivesamount\"><block type=\"math_number\"><field name=\"NUM\">0</field></block></value><value name=\"startingloop\"><block type=\"math_number\"><field name=\"NUM\">0</field></block></value><value name=\"size\"><block type=\"math_number\"><field name=\"NUM\">0</field></block></value><value name=\"explosivepower\"><block type=\"math_number\"><field name=\"NUM\">0</field></block></value></block></next></block></next></block></next></block><block type=\"source_entity_from_deps\" x=\"239\" y=\"215\"/></xml>"
  }
}