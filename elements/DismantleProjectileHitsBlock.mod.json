{
  "_fv": 73,
  "_type": "procedure",
  "definition": {
    "procedurexml": "<xml xmlns=\"https://developers.google.com/blockly/xml\"><block type=\"event_trigger\" deletable=\"false\" x=\"40\" y=\"40\"><field name=\"trigger\">no_ext_trigger</field><next><block type=\"controls_if\"><value name=\"IF0\"><block type=\"entity_is_projectile\"><value name=\"entity\"><block type=\"immediate_source_entity_from_deps\"></block></value></block></value><statement name=\"DO0\"><block type=\"controls_if\"><value name=\"IF0\"><block type=\"logic_binary_ops\"><field name=\"OP\">EQ</field><value name=\"A\"><block type=\"world_data_logic_getgamerule\"><field name=\"gamerulesboolean\">MOB_GRIEFING</field></block></value><value name=\"B\"><block type=\"logic_boolean\"><field name=\"BOOL\">TRUE</field></block></value></block></value><statement name=\"DO0\"><block type=\"java_code\"><field name=\"CODE\">Vec3 currentPos = new Vec3(immediatesourceentity.getBlockX(), immediatesourceentity.getBlockY(), immediatesourceentity.getBlockZ());&amp;#10;Level level = immediatesourceentity.level();&amp;#10;if (level == null)&amp;#10;    return; // Ensure the level is not null&amp;#10;&amp;#10;// Set how far forward the particle should affect blocks&amp;#10;int forwardRange = 30; // Modify this value to increase or decrease the range&amp;#10;for (int i = 0; i &lt; forwardRange; i++) {&amp;#10;    // Calculate direction based on the source entity's rotation&amp;#10;    double radians = Math.toRadians(immediatesourceentity.getYRot() + 90);&amp;#10;    double xOffset = Math.cos(radians) * i; // Cosine for the x direction&amp;#10;    double zOffset = Math.sin(radians) * i; // Sine for the z direction&amp;#10;    Vec3 nextPos = currentPos.add(&amp;#10;        xOffset, // Calculated x-direction&amp;#10;        0,       // Keep the same y-level&amp;#10;        zOffset  // Calculated z-direction&amp;#10;    );&amp;#10;    BlockPos blockPos = new BlockPos((int) (nextPos.x + 1), (int) nextPos.y, (int) (nextPos.z + 1));&amp;#10;&amp;#10;    // Break blocks at the current and below positions&amp;#10;    for (int yOffset = 0; yOffset &lt;= 2; yOffset++) { // Iterate over current and 2 blocks below&amp;#10;        BlockPos posToCheck = blockPos.below(yOffset);&amp;#10;        BlockState blockState = level.getBlockState(posToCheck);&amp;#10;        Block block = blockState.getBlock();&amp;#10;&amp;#10;        // Ensure the block isn't bedrock, barrier, or other unbreakable block&amp;#10;        if (block != Blocks.BEDROCK &amp;&amp; block != Blocks.BARRIER) {&amp;#10;            level.removeBlock(posToCheck, false);&amp;#10;            // Optionally, spawn particles or play a sound on block break&amp;#10;            level.levelEvent(2001, posToCheck, Block.getId(blockState)); // Block break event&amp;#10;        }&amp;#10;    }&amp;#10;}&amp;#10;</field><next><block type=\"entity_execute_command\"><value name=\"command\"><block type=\"text\"><field name=\"TEXT\">particle jjkueffects:dismantle ~ ~ ~ 0 0 0 1 1 force</field></block></value><value name=\"entity\"><block type=\"immediate_source_entity_from_deps\"></block></value><next><block type=\"entity_despawn\"><value name=\"entity\"><block type=\"immediate_source_entity_from_deps\"></block></value></block></next></block></next></block></statement><next><block type=\"add_jujutsucraft_potion\"><field name=\"datalist\">FATIGUE</field><value name=\"value3\"><block type=\"math_number\"><field name=\"NUM\">0</field></block></value><value name=\"value2\"><block type=\"math_number\"><field name=\"NUM\">20</field></block></value><value name=\"tickambient\"><block type=\"logic_boolean\"><field name=\"BOOL\">FALSE</field></block></value><value name=\"particles\"><block type=\"logic_boolean\"><field name=\"BOOL\">FALSE</field></block></value><value name=\"entity\"><block type=\"entity_from_deps\"></block></value></block></next></block></statement></block></next></block></xml>"
  }
}